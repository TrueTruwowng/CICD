server:
  port: 8080

spring:
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        registration:
          auth0:
            client-id: ${AUTH0_CLIENT_ID:SgY5cQrdr8HiUpBcXSK9uqE11JzyOXZI}
            client-secret: ${AUTH0_CLIENT_SECRET:PQEvjjn1pdRu8xmYE6dfPuuqjrbcI7Exi_RzHaW4HgmMqWnWdVfPQdgYh3TlIiKT}
            scope: openid,profile,email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
          google:
            client-id: ${GOOGLE_CLIENT_ID:812947712417-kskh338qoq52i8eunacqvdr2f5obfnnq.apps.googleusercontent.com}
            client-secret: ${GOOGLE_CLIENT_SECRET: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}
            scope: openid,profile,email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
          github:
            client-id: ${GITHUB_CLIENT_ID:Ov23liMyNoXJsrr0Djpc}
            client-secret: ${GITHUB_CLIENT_SECRET:e6941ddf0bd9e13546aad52961df50d968152af7}
            scope: read:user,user:email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
        provider:
          auth0:
            # Use explicit endpoints to avoid OIDC discovery when AUTH0_DOMAIN is unset
            authorization-uri: https://${AUTH0_DOMAIN:dev-ekmub4dsc8keyk1f.us.auth0.com}/authorize
            token-uri: https://${AUTH0_DOMAIN:dev-ekmub4dsc8keyk1f.us.auth0.com}/oauth/token
            jwk-set-uri: https://${AUTH0_DOMAIN:dev-ekmub4dsc8keyk1f.us.auth0.com}/.well-known/jwks.json
            user-info-uri: https://${AUTH0_DOMAIN:dev-ekmub4dsc8keyk1f.us.auth0.com}/userinfo
            user-name-attribute: sub
      resourceserver:
        jwt:
          # Avoid discovery; rely on explicit JWKS endpoint (Auth0 only). If using only Google/GitHub login (session based), can remove.
          jwk-set-uri: https://${AUTH0_DOMAIN:example.invalid}/.well-known/jwks.json

  # H2 Database Configuration (In-Memory)
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
    database-platform: org.hibernate.dialect.H2Dialect

# Custom property for audience (API Identifier in Auth0) if you need access tokens for API calls
auth0:
  audience: ${AUTH0_AUDIENCE:}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  level:
    org.springframework.security: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
